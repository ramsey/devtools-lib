#!/usr/bin/env php
<?php

/**
 * This file is part of ramsey/devtools-lib
 *
 * ramsey/devtools-lib is open source software: you can distribute
 * it and/or modify it under the terms of the MIT License
 * (the "License"). You may not use this file except in
 * compliance with the License.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 *
 * @copyright Copyright (c) Ben Ramsey <ben@benramsey.com>
 * @license https://opensource.org/licenses/MIT MIT License
 */

declare(strict_types=1);

use Composer\Console\Application;
use Composer\Factory;
use Composer\IO\ConsoleIO;
use Ramsey\Dev\Tools\Composer\DevToolsPlugin;
use Symfony\Component\Console\Helper\HelperSet;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Input\StringInput;

(static function (array $argv): void {
    $composerAutoloadLocations = [
        __DIR__ . '/../autoload.php',
        __DIR__ . '/../vendor/autoload.php',
        __DIR__ . '/../../../autoload.php',
    ];

    foreach ($composerAutoloadLocations as $file) {
        if (file_exists($file)) {
            $composerAutoloader = $file;

            break;
        }
    }
    unset($file);

    if (!isset($composerAutoloader)) {
        fwrite(
            STDERR,
            'To execute this command, please install Composer and run \'composer install\'.' . PHP_EOL
            . 'For more information, go to https://getcomposer.org' . PHP_EOL,
        );

        exit(1);
    }

    require $composerAutoloader;

    $input = new StringInput('');
    $output = Factory::createOutput();
    $helperSet = new HelperSet();
    $io = new ConsoleIO($input, $output, $helperSet);

    $composer = Factory::create($io);
    $composerPlugin = new DevToolsPlugin();
    $composerPlugin->activate($composer, $io);

    $application = new Application();
    $application->addCommands($composerPlugin->getCommands());
    $application->run(new ArgvInput($argv));
})($argv);
